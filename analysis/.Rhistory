# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
t
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_boxplot()
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line()
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line() +
geom_line(aes(x=Date, y=temp_z))
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line() +
geom_line(aes(x=Date, y=temp_z), col='red')
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red')
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red') + ggtitle("Temp vs JSE")
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red', legend()) + ggtitle("Temp vs JSE")
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red') + ggtitle("Temp vs JSE")
cor(t)
cor(t$z_price, t$temp_z)
# date
jhb$date_time = as.Date(jhb$date_time)
ct$date_time = as.Date(ct$date_time)
dur$date_time = as.Date(dur$date_time)
pta$date_time = as.Date(pta$date_time)
blm$date_time = as.Date(blm$date_time)
library(dplyr)
# average temperature per day
jhb_mean_temp <- jhb %>% group_by(date_time) %>% summarise(mean_temp = mean(tempC))
# merge datasets
jhb_mean_temp$Date = jhb_mean_temp$date_time
t = merge(jhb_mean_temp, jse, by='Date')
t$temp_z = (t$mean_temp - mean(t$mean_temp))/sd(t$mean_temp)
# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
t
print(paste("Correlation", cor(t$z_price, t$temp_z)))
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red') + ggtitle("Temp vs JSE")
# date
jhb$date_time = as.Date(jhb$date_time)
ct$date_time = as.Date(ct$date_time)
dur$date_time = as.Date(dur$date_time)
pta$date_time = as.Date(pta$date_time)
blm$date_time = as.Date(blm$date_time)
library(dplyr)
# average temperature per day
jhb_mean_temp <- jhb %>% group_by(date_time) %>% summarise(mean_temp = mean(tempC))
# merge datasets
jhb_mean_temp$Date = jhb_mean_temp$date_time
t = merge(jhb_mean_temp, jse, by='Date')
t$temp_z = (t$mean_temp - mean(t$mean_temp))/sd(t$mean_temp)
# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
print(paste("Correlation", cor(t$z_price, t$temp_z)))
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red') + ggtitle("Temp vs JSE")
# set working directory
setwd("~/Desktop/Quanta_CS/analysis")
# import weather data
jhb = read.csv("../data/weather/johannesburg.csv")
ct = read.csv("../data/weather/capetown.csv")
dur = read.csv("../data/weather/durban.csv")
pta = read.csv("../data/weather/pretoria.csv")
blm = read.csv("../data/weather/Bloemfontein.csv")
# JSE data
jse = read.csv('../data/jse/JALSH.csv')
library(tidyverse)
library(dplyr)
library(ggplot2)
# clean data
jse$Price = as.numeric(gsub(",", "",jse$Price))
jse$Open = as.numeric(gsub(",", "",jse$Open))
jse$Low = as.numeric(gsub(",", "",jse$Low))
jse$High = as.numeric(gsub(",", "",jse$High))
# Volume
jse$Vol. = gsub("M", "000000", jse$Vol.)
jse$Vol. = gsub("B", "000000000", jse$Vol.)
jse$Vol. = as.numeric(jse$Vol.)
jse$Vol.[which(jse$Vol. < 10)] = jse$Vol.[jse$Vol. < 10]*10000
# Date
jse$Date = as.Date(jse$Date, format="%b %d, %Y")
# Keep: date, price & vol
jse = jse %>% select('Date', "Price", "Vol.")
# View Cleanup
head(jse)
# standardized price
jse$z_price = (jse$Price - mean(jse$Price))/sd(jse$Price)
# plot
jse_plot <- ggplot(jse, aes(x=Date, y=Price)) + geom_line(col='darkblue') + ggtitle("JSE All Shares Index")
jse_plot_z <- ggplot(jse, aes(x=Date, y=z_price)) + geom_line(col='maroon') + ggtitle("JSE All Shares Index Standardized")
jse_plot
jse_plot_z
# date
jhb$date_time = as.Date(jhb$date_time)
ct$date_time = as.Date(ct$date_time)
dur$date_time = as.Date(dur$date_time)
pta$date_time = as.Date(pta$date_time)
blm$date_time = as.Date(blm$date_time)
library(dplyr)
# average temperature per day
jhb_mean_temp <- jhb %>% group_by(date_time) %>% summarise(mean_temp = mean(tempC))
# merge datasets
jhb_mean_temp$Date = jhb_mean_temp$date_time
t = merge(jhb_mean_temp, jse, by='Date')
t$temp_z = (t$mean_temp - mean(t$mean_temp))/sd(t$mean_temp)
# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
print(paste("Correlation", cor(t$z_price, t$temp_z)))
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='blue') +
geom_line(aes(x=Date, y=temp_z), col='red') + ggtitle("Temp vs JSE")
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='darkgreen') +
geom_line(aes(x=Date, y=temp_z), col='darkred') + ggtitle("Temp vs JSE")
# date
jhb$date_time = as.Date(jhb$date_time)
ct$date_time = as.Date(ct$date_time)
dur$date_time = as.Date(dur$date_time)
pta$date_time = as.Date(pta$date_time)
blm$date_time = as.Date(blm$date_time)
library(dplyr)
# average temperature per day
jhb_mean_temp <- jhb %>% group_by(date_time) %>% summarise(mean_temp = mean(tempC))
# merge datasets
jhb_mean_temp$Date = jhb_mean_temp$date_time
t = merge(jhb_mean_temp, jse, by='Date')
t$temp_z = (t$mean_temp - mean(t$mean_temp))/sd(t$mean_temp)
# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
print(paste("Correlation", cor(t$z_price, t$temp_z)))
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='darkgreen') +
geom_line(aes(x=Date, y=temp_z), col='darkred') + ggtitle("Temp vs JSE")
add_mean_temp <- function(dataset, temp) {
dataset$mean_temp = mean(temp)
return(dataset)
}
add_mean_temp(ct, ct$tempC)
for (i in (1:length(vars))) {
print("test")
}
vars = 23
for (i in (1:length(vars))) {
print("test")
}
vars = c(1,2,42,2)
for (i in (1:length(vars))) {
print("test")
}
"this" + "that"
paste("this", "that")
paste("this", "that", sep="")
jhb %>% group_by(date_time) %>% summarise(mean_temp = mean(tempC))
# date
jhb$Date = as.Date(jhb$date_time)
ct$Date = as.Date(ct$date_time)
dur$Date = as.Date(dur$date_time)
pta$Date = as.Date(pta$date_time)
blm$Date = as.Date(blm$date_time)
print(i)
for (i in 3) {
print(i)
}
install.packages("docstring")
library(docstring)
"
install.packages("docstring")
library(docstring)
install.packages("docstring")
install.packages("docstring")
library(docstring)
standard_mean_temp <- function(dataset, vars) {
" Return standardized variable - attached to dataframe "
for (i in vars) {
# average per day & stdard value
daily_mean <- dataset %>% group_by(date_time) %>% summarise(mean = mean(i))
mean_z <- (daily_mean - mean(daily_mean))/sd(daily_mean)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
}
jhb
standard_mean_temp(jhb, tempC)
standard_mean_temp(jhb, jhb$tempC)
library(dplyr)
standard_mean_temp(jhb, jhb$tempC)
standard_mean_temp <- function(dataset, vars) {
" Return standardized variable - attached to dataframe "
for (i in vars) {
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(i))
mean_z <- (daily_mean - mean(daily_mean))/sd(daily_mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
}
jhb
standard_mean_temp(jhb, jhb$tempC)
standard_mean_temp(jhb, c(jhb$tempC))
jhb$tempC
jhb$tempC[1]
c(jhb$tempC)
length(c(jhb$tempC))
length(c(jhb$tempC))
ncol(jhb$tempC)
standard_mean_temp <- function(dataset, vars, list=FALSE) {
" Return standardized variable - attached to dataframe "
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(vars))
mean_z <- (daily_mean - mean(daily_mean))/sd(daily_mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
jhb
standard_mean_temp(jhb, jhb$tempC)
standard_mean_temp <- function(dataset, vars, list=FALSE) {
" Return standardized variable - attached to dataframe "
print(dataset)
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(vars))
mean_z <- (daily_mean - mean(daily_mean))/sd(daily_mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp(jhb, jhb$tempC)
dataset = jhb
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(vars))
mean_z <- (daily_mean - mean(daily_mean))/sd(daily_mean)
print(daily_mean)
mean_z <- (daily_mean - mean(daily_mean))/sd(daily_mean)
print(daily_mean)
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(vars))
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(dataset$tempC))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(dataset$tempC))
daily_mean
dataset = jhb
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(dataset$tempC))
daily_mean
# import weather data
jhb = read.csv("../data/weather/johannesburg.csv")
# date
jhb$Date = as.Date(jhb$date_time)
dataset = jhb
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(dataset$tempC))
daily_mean
# average per day & stdard value
dataset %>% group_by(Date) %>% summarise(mean = mean(dataset$tempC))
# average per day & stdard value
dataset %>% group_by(Date)
# average per day & stdard value
dataset %>% group_by(Date)  %>% summarise(mean = mean(tempC))
daily_mean
# average per day & stdard value
dataset %>% group_by(Date)  %>% summarise(mean = mean(tempC))
daily_mean
# average temperature per day
jhb_mean_temp <- jhb %>% group_by(date_time) %>% summarise(mean_temp = mean(tempC))
# merge datasets
jhb_mean_temp$Date = jhb_mean_temp$date_time
t = merge(jhb_mean_temp, jse, by='Date')
t$temp_z = (t$mean_temp - mean(t$mean_temp))/sd(t$mean_temp)
# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
print(paste("Correlation", cor(t$z_price, t$temp_z)))
# average per day & stdard value
dataset %>% group_by(Date)  %>% summarise(mean = mean(tempC))
# average per day & stdard value
daily_mean = dataset %>% group_by(Date)  %>% summarise(mean = mean(tempC))
daily_mean
dataset = jhb
# average per day & stdard value
daily_mean = dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
daily_mean
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
daily_mean
mean_z
standard_mean_temp <- function(dataset, var, list=FALSE) {
" Return standardized variable - attached to dataframe "
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(var))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp(jhb, tempC)
tempC=1
standard_mean_temp(jhb, tempC)
standard_mean_temp(jhb, 'tempC')
dataset = jhb
# average per day & stdard value
daily_mean = dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
daily_mean
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
daily_mean
mean_z
standard_mean_temp(jhb, 'tempC')
standard_mean_temp <- function(dataset, var, list=FALSE) {
" Return standardized variable - attached to dataframe "
print(var)
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(var))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp(jhb, 'tempC')
standard_mean_temp(jhb, 'tempC')
as.character(tempC)
as.factor(tempC)
standard_mean_temp(jhb)
standard_mean_temp <- function(dataset) {
" Return standardized variable - attached to dataframe "
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp(jhb)
standard_mean_temp(jhb)
standard_mean_temp <- function(dataset) {
" Return standardized temoerature - attached to dataframe "
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# add to dataset
dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp(jhb)
}
standard_mexan_temp <- function(dataset) {
" Return standardized temoerature - attached to dataframe "
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# add to dataset
#dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp <- function(dataset) {
" Return standardized temoerature - attached to dataframe "
# average per day & stdard value
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
print(daily_mean)
print(mean_z)
# add to dataset
#dataset$paste(i, "_z", sep="") <- mean_z
}
standard_mean_temp(jhb)
# compute std_z temperature
jhb$temp_z = standard_mean_temp(jhb)
jhb$temp_z
jhb$temp_z = standard_mean_temp(jhb)
ct$temp_z = standard_mean_temp(ct)
dur$temp_z = standard_mean_temp(dur)
blm$temp_z = standard_mean_temp(blm)
pta$temp_z = standard_mean_temp(pta)
jhb
# create 1 dateset with temperatures
full_join(jhb)
# create 1 dateset with temperatures
full_join(jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
# create 1 dateset with temperatures
cbind(jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
# create 1 dateset with temperatures
cbind(jhb$sunHour, jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
# create 1 dateset with temperatures
cbind(jhb$Date, jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
# create 1 dateset with temperatures
dataset = cbind(hb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
# create 1 dateset with temperatures
dataset = cbind(hb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
# create 1 dateset with temperatures
dataset = cbind(jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
names(dataset)
names(dataset) = c('jhb', 'ct', 'dur', 'blm', 'pta')
dataset
# create 1 dateset with temperatures
dataset = cbind(jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
dataset
colnames(dataset) = c('jhb', 'ct', 'dur', 'blm', 'pta')
dataset
# create 1 dateset with temperatures
dataset = cbind(jhb$Date, jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
colnames(dataset) = c("Date", 'jhb', 'ct', 'dur', 'blm', 'pta')
dataset
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line()
library(ggplot2)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line()
dataset = data.frame(dataset)
library(ggplot2)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line()
ggplot(dataset, aes(x=Date, y=jhb)) + geom_point()
ggplot(dataset, aes(x=Date, y=jhb)) + geom_point(col='pink')
ggplot(dataset, aes(x=Date, y=jhb)) + geom_point(col='pink',alpha=0.3)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='pink',alpha=0.3)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='red',alpha=0.3)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='red',alpha=0.3) +
geom_line(aes(x=Date, y=ct), col='blue', alpha=0.3)
pta$temp_z
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='red',alpha=0.3) +
geom_line(aes(x=Date, y=ct), col='blue', alpha=0.3)
dataset[,2:]
dataset[,2:ncol(dataset)]
dataset[,1:ncol(dataset)]
dataset[,2:ncol(dataset)]
# correlation
cor(dataset[,2:ncol(dataset)])
corrplot(dataset[,2:ncol(dataset)])
# plot correlation
library(corrplot)
corrplot(dataset[,2:ncol(dataset)])
# plot correlation
library(corrplot)
?corrplot
# correlation
dataset.corr = cor(dataset[,2:ncol(dataset)])
corrplot(dataset.corr)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='red',alpha=0.3) +
geom_line(aes(x=Date, y=ct), col='blue', alpha=0.3) +
geom_line(aes(x=Date, y=dur), col='darkgreen', alpha=0.3) +
geom_line(aes(x=Date, y=blm), col='black', alpha=0.3) +
geom_line(aes(x=Date, y=pta), col='lightblue', alpha=0.3)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='red',alpha=0.3) +
geom_line(aes(x=Date, y=ct), col='blue', alpha=0.3) +
geom_line(aes(x=Date, y=dur), col='darkgreen', alpha=0.3) +
geom_line(aes(x=Date, y=blm), col='black', alpha=0.3) +
geom_line(aes(x=Date, y=pta), col='lightblue', alpha=0.3) +
ggtitle("Regular Temperature")
# correlation in temperature
dataset.corr = cor(dataset[,2:ncol(dataset)])
# plot correlation
library(corrplot)
corrplot(dataset.corr)
# select desired columns
t = t %>% select('Date', 'temp_z', 'z_price','Vol.')
print(paste("Correlation", cor(t$z_price, t$temp_z)))
# visualize
ggplot(t, aes(x=Date, y=z_price)) + geom_line(col='darkgreen') +
geom_line(aes(x=Date, y=temp_z), col='darkred') + ggtitle("Temp vs JSE")
library(dplyr)
library(docstring)
# Clean Date
jhb$Date = as.Date(jhb$date_time)
ct$Date = as.Date(ct$date_time)
dur$Date = as.Date(dur$date_time)
pta$Date = as.Date(pta$date_time)
blm$Date = as.Date(blm$date_time)
standard_mean_temp <- function(dataset) {
" Return standardized temoerature - attached to dataframe "
daily_mean <- dataset %>% group_by(Date) %>% summarise(mean = mean(tempC))
mean_z <- (daily_mean$mean - mean(daily_mean$mean))/sd(daily_mean$mean)
}
# compute std_z temperature
jhb$temp_z = standard_mean_temp(jhb)
ct$temp_z = standard_mean_temp(ct)
dur$temp_z = standard_mean_temp(dur)
blm$temp_z = standard_mean_temp(blm)
pta$temp_z = standard_mean_temp(pta)
# create 1 dateset with temperatures
dataset = cbind(jhb$Date, jhb$temp_z,ct$temp_z, dur$temp_z, blm$temp_z, pta$temp_z)
colnames(dataset) = c("Date", 'jhb', 'ct', 'dur', 'blm', 'pta')
dataset = data.frame(dataset)
library(ggplot2)
ggplot(dataset, aes(x=Date, y=jhb)) + geom_line(col='red',alpha=0.3) +
geom_line(aes(x=Date, y=ct), col='blue', alpha=0.3) +
geom_line(aes(x=Date, y=dur), col='darkgreen', alpha=0.3) +
geom_line(aes(x=Date, y=blm), col='black', alpha=0.3) +
geom_line(aes(x=Date, y=pta), col='lightblue', alpha=0.3) +
ggtitle("Regular Temperature")
# correlation in temperature
dataset.corr = cor(dataset[,2:ncol(dataset)])
# plot correlation
library(corrplot)
corrplot(dataset.corr)
